# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# kafka bootstrap servers comma separated
# e.g. localhost:9092,host2:9093
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
kafka.bootstrap.servers=localhost:9092

kafka.producer.properties=kafka_servers/kafka_producer.properties
kafka.consumer.properties=kafka_servers/kafka_consumer.properties


# Kafka REST Proxy end point for sending avro messages
web.application.endpoint.host=http://localhost
web.application.endpoint.port=8082
web.application.endpoint.context=

# URL of Kafka KSQL server
kafka-ksql-server-fqdn=http://localhost:8088

# --------------------------------------------------------------------
# Optional local consumer properties common/central to all test cases.
# These can be overwritten by the tests locally.
# --------------------------------------------------------------------
# If this property is set, then the consumer does a commitSync after reading the message(s)
# Make sure you don't set both commitSync and commitAsync to true
consumer.commitSync = true
# If this property is set, then the consumer does a commitAsync after reading the message(s)
# Make sure you don't set both commitSync and commitAsync to true
consumer.commitAsync = false
# All records those were read are dumped to this specified file path
# This path can be a relative path or an absolute path. If the file
# does not exist, it creates the file and dumps the records
consumer.fileDumpTo= target/temp/demo.txt
# If this property is set to true, all records are shown in the response.
# When dealing with large number of records, you might not be interested
# in the individual records, but interested in the recordCount
# i.e. total number of records consumed
consumer.showRecordsConsumed=false
# That means if any record(s) are read, then this counter is reset to 0(zero) and the consumer
# polls again. So if no records are fetched for a specific poll interval, then the consumer
# gives a retry retrying until this max number polls/reties reached.
consumer.maxNoOfRetryPollsOrTimeouts = 5
# Polling time in milli seconds i.e how long the consumer should poll before
# the next retry poll
consumer.pollingTime = 1000

# local producer properties
producer.key1=value1-testv ycvb
